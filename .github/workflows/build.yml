name: Release

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      publish:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "main"
  
env:
  CARGO_TERM_COLOR: always
  TAG_NAME: ${{ inputs.upload-tag }}
  PUBLISH: ${{ inputs.publish }}
  PKG_NAME: "volkanicmc-construct"
  BIN_NAME: "vkconstruct"
  VERSION: "0.1.0"
  REVISION: "1"

jobs:
  build-linux:
    name: Build for Linux
    runs-on: ${{ matrix.job.on }}
    strategy:
      matrix:
        job:
          - {
              arch: x86_64,
              target: x86_64-unknown-linux-gnu,
              on: ubuntu-20.04,
            }
          - {
              arch: aarch64,
              target: aarch64-unknown-linux-gnu,
              on: ubuntu-20.04,
            }
          - {
              arch: armv7,
              target: armv7-unknown-linux-gnueabihf,
              on: ubuntu-20.04,
            }
    steps:
      - uses: actions/checkout@v4
      - name: Install build tools
        run: |
          sudo apt update
          sudo apt remove cargo rustc rust-doc
          if [[ "${{ matrix.job.arch }}" == "aarch64" ]]; then
            sudo apt install -y gcc-aarch64-linux-gnu
          elif [[ "${{ matrix.job.arch }}" == "armv7" ]]; then
            sudo apt install -y gcc-arm-linux-gnueabihf
          fi
      - name: Install Rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile=minimal
      - name: Add Rust target
        run: |
          if [[ "${{ matrix.job.target }}" != "x86_64-unknown-linux-gnu" ]]; then
            rustup target add ${{ matrix.job.target }}
          fi
      - name: Show Rust version
        run: |
          cargo --version
          rustc --version
      - name: Install packaging tools
        run: |
          cargo install cargo-deb cargo-generate-rpm
      - name: Build
        run: |
          cargo build --profile release --target ${{ matrix.job.target }}
      - name: Determine package naming
        run: |
          echo "TAR_NAME=${{ env.PKG_NAME }}_${{ env.VERSION }}-${{ env.REVISION }}_linux-${{ matrix.job.arch }}-bin" >> $GITHUB_ENV
          echo "DEB_NAME=${{ env.PKG_NAME }}_${{ env.VERSION }}-${{ env.REVISION }}_${{ matrix.job.arch }}" >> $GITHUB_ENV
          echo "RPM_NAME=${{ env.PKG_NAME }}-${{ env.VERSION }}-${{ env.REVISION }}.${{ matrix.job.arch }}" >> $GITHUB_ENV
      - name: Build Tar package
        run: |
          echo "Starting at $(pwd)"
          cd target/
          echo "Changing current directory to $(pwd)"

          export BIN_PATH=$(pwd)/${{ matrix.job.target }}/release/${{ env.BIN_NAME }}
          cp $BIN_PATH ${{ env.BIN_NAME }}

          tar -cJf ${{ env.TAR_NAME }}.tar.xz ${{ env.BIN_NAME }}

          rm ${{ env.BIN_NAME }}
          cd ../
      - name: Build Debian package
        run: |
          cargo deb --profile release --target ${{ matrix.job.target }} -o target/${{ env.DEB_NAME }}.deb
      - name: Build RPM package
        run: |
          cargo generate-rpm --profile release --target ${{ matrix.job.target }} -o target/${{ env.RPM_NAME }}.rpm
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: target/${{ env.TAR_NAME }}.tar.xz
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEB_NAME }}
          path: target/${{ env.DEB_NAME }}.deb
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RPM_NAME }}
          path: target/${{ env.RPM_NAME }}.rpm
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: env.PUBLISH == 'true'
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            target/${{ env.TAR_NAME }}.tar.xz
            target/${{ env.DEB_NAME }}.deb
            target/${{ env.RPM_NAME }}.rpm

  build-mac:
    name: Build for Mac
    runs-on: ${{ matrix.job.on }}
    strategy:
      matrix:
        job:
          - {
              arch: aarch64,
              os: mac,
              host: aarch64-apple-darwin,
              target: aarch64-apple-darwin,
              version: stable,
              on: macos-14,
            }
          - {
              arch: x86_64,
              os: mac,
              host: aarch64-apple-darwin,
              target: x86_64-apple-darwin,
              version: stable,
              on: macos-14,
            }
          - {
              arch: x86_64,
              os: maclegacy,
              host: x86_64-apple-darwin,
              target: x86_64-apple-darwin,
              version: 1.73,
              on: macos-11,
            }
    steps:
      - name: Install Rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile=minimal --default-toolchain ${{ matrix.job.version }}-${{ matrix.job.host }}
      - name: Add Rust target
        run: |
          rustup target add ${{ matrix.job.target }}
      - uses: actions/checkout@v4
      - name: Show Rust version
        run: |
          cargo --version
          rustc --version
      - name: Build
        run: |
          cargo build --profile release --target ${{ matrix.job.target }}
      - name: Determine package naming
        run: |
          echo "TAR_NAME=${{ env.PKG_NAME }}_${{ env.VERSION }}-${{ env.REVISION }}_${{ matrix.job.os }}-${{ matrix.job.arch }}-bin" >> $GITHUB_ENV
      - name: Build Tar package
        run: |
          echo "Starting at $(pwd)"
          cd target/
          echo "Changing current directory to $(pwd)"

          export BIN_PATH=$(pwd)/${{ matrix.job.target }}/release/${{ env.BIN_NAME }}
          cp $BIN_PATH ${{ env.BIN_NAME }}

          tar -cJf ${{ env.TAR_NAME }}.tar.xz ${{ env.BIN_NAME }}

          rm ${{ env.BIN_NAME }}
          cd ../
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.TAR_NAME }}
          path: target/${{ env.TAR_NAME }}.tar.xz
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: env.PUBLISH == 'true'
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            target/${{ env.TAR_NAME }}.tar.xz  

  build-windows:
    name: Build for Windows
    runs-on: ${{ matrix.job.on }}
    strategy:
      matrix:
        job:
          - {
              arch: x86_64,
              target: x86_64-pc-windows-msvc,
              version: "1.74",
              on: windows-2022,
            }
          - {
              arch: i686,
              target: i686-pc-windows-msvc,
              version: "1.74",
              on: windows-2022,
            }
    steps:
      - uses: hecrj/setup-rust-action@v2
        with:
          rust-version: "${{ matrix.job.version }}"
          targets: ${{ matrix.job.target }}
      - uses: actions/checkout@v4
      - name: Show Rust version
        run: |
          cargo --version
          rustc --version
      - name: Install packaging tools
        run: |
          cargo install cargo-wix
      - name: Build
        run: |
          cargo build --profile release --target ${{ matrix.job.target }}
      - name: Determine package naming
        shell: pwsh
        run: |
          "EXE_NAME=${{ env.PKG_NAME }}_${{ env.VERSION }}-${{ env.REVISION }}_win-${{ matrix.job.arch }}-bin" | Out-File -FilePath $env:GITHUB_ENV -Append
          "MSI_NAME=${{ env.PKG_NAME }}_${{ env.VERSION }}-${{ env.REVISION }}_win-${{ matrix.job.arch }}-installer" | Out-File -FilePath $env:GITHUB_ENV -Append
      - name: Build Windows MSI installer
        run: |
          cargo wix --target ${{ matrix.job.target }} -o target/${{ env.MSI_NAME }}.msi
      - name: Copy executable
        shell: pwsh
        run: |
          cp target/${{ matrix.job.target }}/release/${{ env.BIN_NAME }}.exe target/${{ env.EXE_NAME }}.exe
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EXE_NAME }}
          path: target/${{ env.EXE_NAME }}.exe
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.MSI_NAME }}
          path: target/${{ env.MSI_NAME }}.msi
      - name: Publish Release
        uses: softprops/action-gh-release@v1
        if: env.PUBLISH == 'true'
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            target/${{ env.EXE_NAME }}.exe
            target/${{ env.MSI_NAME }}.msi
